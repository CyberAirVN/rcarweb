<% if (arduinoStatus != 'ready' && arduinoStatus != 'connected') { %>
<div class="modal fade hide" id="arduinoNotFoundModal">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal">×</button>
    <h3>Arduino not found</h3>
  </div>
  <div class="modal-body">
    <p>You must wire your Arduino to your computer <em>before</em> starting up the server for this web app to be able to control your board. If you have it connected to your computer, restart the web server.<br /><br />
    You will need to upload <a href="https://github.com/ecto/duino/blob/master/src/du.ino" title="duino's code to upload to Arduino">this code</a> to your Arduino before you run the server.</p>
  </div>
  <div class="modal-footer">
    <a href="#" class="btn btn-info" data-dismiss="modal">Dismiss</a>
  </div>
</div>
<% } %>
<div class="modal fade hide" id="socketNotFoundModal">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal">×</button>
    <h3>Socket not found</h3>
  </div>
  <div class="modal-body">
    <p>The WebSocket (or other fall-back solution) could not connect to the server. <a href="/">Try to reload this page</a>.</p>
  </div>
  <div class="modal-footer">
    <a href="#" class="btn btn-info" data-dismiss="modal">Dismiss</a>
  </div>
</div>
<div class="container">
  <div class="row">
    <div class="span12">
      <div class="page-header about">
        <h1>rcarweb</h1>
        <p>This project aims to integrate Arduino with WebSockets so that you can control a RC car over the web and do some more fun stuff. It comes from: rc + car + web and rc + ar (from Arduino) + web as even thought the primary goal is to control a car it can serve you well as how-to control a Arduino board over the web for many others purposes. Remember to upload <a href="https://github.com/ecto/duino/blob/master/src/du.ino" title="duino's code to upload to Arduino">this code</a> to your Arduino before using this web application.</p>
        <p>You can use <a href="http://www.fritzing.org/">Fritzing</a> to read and create new sketchs for your own experiments. It is useful for modelling before mounting your protoboard and it offers a easy way to share your models with others.</p>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="span12">
      <div id="main-alert-zone"></div>
    </div>
  </div>
  <div class= "row">
    <div class="span12">
      <section id="rccar">
        <div class="page-header">
          <h1>RC car</h1>
         <p>Take a ride in a RC car with Arduino, WebSockets and node.js.</p>
         <p><span class="label label-info">Info</span> this experiment is not available yet.</p>
       </div>
      </section>
      <canvas class="space"></canvas>
      <img class="video-stream" id="video-stream" src="http://placehold.it/640x480" width="280" height="157" alt="video stream" />
    </div>
  </div>
  <div class="row">
    <div class="span12">
      <div class="progress progress-danger progress-striped progress-size-limit" id="progress">
        <div class="bar"></div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="span12">
      <button class="btn btn-success btn-large" id="rc-btn-start">
        <i class="icon-off icon-white"></i> start
     </button>
     <button class="btn btn-warning btn-large" id="pin13-debug-btn" title="Check the health of your Arduino" data-content="On your Arduino board find the 13-pin digital output. It almost certainly has a soldered LED on it. When you press this button a SOS distress signal should flash once.">
        <i class="icon-flag icon-white"></i> debug
      </button>
      <button class="btn btn-danger btn-large" id="rc-btn-park">
        <i class="icon-stop icon-white"></i> park
      </button>
      <button class="btn btn-default btn-large rc-btn-cam" id="rc-btn-cam">
        <i class="icon-facetime-video"></i> turn on the cam
      </button>
      <i class="icon-remove-sign" id="websocket-connection-status"></i>
      <span id="socket-type">WebSockets</span>
      <% if (arduinoStatus == 'ready') { %>
      <i class="icon-ok-sign"></i>
      <% } else if (arduinoStatus == 'connected') { %>
      <i class="icon-minus-sign"></i>
      <% } else { %>
      <i class="icon-remove-sign"></i>
      <% } %>
      Arduino
      <span class="label label-success transceiver-indicator" id="tx-indicator">tx</span>
      <span class="label label-important transceiver-indicator" id="rx-indicator">rx</span>
    </div>
  </div>
  <div class="row">
    <div class="span8">
      <section id="morse">
        <form class="form-inline">
          <div class="page-header">
           <h1>Morse code</h1>
           <p>Messages are encoded with regard to the <a href="http://www.itu.int/rec/R-REC-M.1677-1-200910-I/">International Morse Code</a>. The signal is sent to the 13-pin digital output by default (your Arduino board almost certainly has a LED hooked in this pin). Characters not available for translation will be silently ignored.<br />
           Learn more about <a href="http://en.wikipedia.org/wiki/Morse_code">morse code</a>.</p>
            <input id="morse-textarea" type="text" placeholder="Type any text message here" maxlength="30" />
            <button class="btn btn-primary" id="morse-submit">Run</button>
            <span class="help-inline false-pre" id="morse-return"></span>
          </div>
        </form>
      </section>
    </div>
  </div>
  <div class="row">
    <div class="span8">
      <section id="analog">
        <form class="form-horizontal">
          <div class="page-header">
           <h1>Analog input</h1>
           <p>You can use the analog input pins to read analog data from sensors like: potentiometer, photoresistor, thermometers, etc. The values read are between 0&nbsp;–&nbsp;1023.</p>
           <h2>Try a potentiometer</h2>
           <div class="control-group">
              <label class="control-label" for="potentiometer-gauge">Value (analog pin <%= config.potentiometerPin %>)</label>
              <div class="controls">
                <div class="input-prepend">
                  <input class="input-mini" name="potentiometer-gauge" id="potentiometer-gauge" type="number" placeholder="undefined" readonly disabled />
                </div>
              </div>
            </div>
            <a href="/sketches/potentiometer.fzz" title="Potentiometer sketch"><img src="/sketches/potentiometer-bb.png" alt="Potentiometer Breadboard" /></a>
            <p>One of the things you can do is use it to dim a LED, a buzz or something like that: for that you'd want to map the 0&nbsp;–&nbsp;1023 read value interval to 0&nbsp;–&nbsp;255 for using the PWM output.</p>
          </div>
        </form>
      </section>
    </div>
  </div>
  <div class="row">
    <div class="span8">
      <section id="squarewave">
        <div class="page-header">
          <h1>Square Wave</h1>
          <p><a title="Arduino - PWM" href="http://arduino.cc/en/Tutorial/PWM">Pulse Width Modulation</a>, or PWM,  is a technique for getting analog results with digital means. Digital control is used to create a square wave, a signal switched between on and off. We will use it here to control the speed of a small motor and to control the pulse of light of a RGB LED.</p>
          <form class="form-inline">
          <h2>Speed control</h2>
          <input type="range" name="squarewave" id="speed-control" min="0" max="255" step="1" value="0" />
          <output for="squarewave" id="speed-control-gauge">0</output>
          <p><span class="label label-info">Tip</span> Use a small <a href="http://www.sparkfun.com/products/8449">vibration motor</a> wired to a appropriate resistor.</p>
          </form>
          <form class="form-horizontal">
            <h2>RGB LED</h2>
            <div class="control-group">
              <label class="control-label" for="rgb-led-r">Red (digital pin <%= config.redPin %>)</label>
              <div class="controls">
                <div class="input-prepend">
                  <input class="span1" type="number" id="rgb-led-r" name="rgb-led-r" autocomplete="off" min="0" max="255" value="0" />
                </div>
              </div>
            </div>
            <div class="control-group">
              <label class="control-label" for="rgb-led-g">Green (digital pin <%= config.greenPin %>)</label>
              <div class="controls">
                <div class="input-prepend">
                  <input class="span1" type="number" id="rgb-led-g" name="rgb-led-g" autocomplete="off" min="0" max="255" value="0" />
                </div>
              </div>
            </div>
            <div class="control-group">
              <label class="control-label" for="rgb-led-b">Blue (digital pin <%= config.bluePin %>)</label>
              <div class="controls">
                <div class="input-prepend">
                  <input class="span1" type="number" id="rgb-led-b" name="rgb-led-b" autocomplete="off" min="0" max="255" value="0" />
                </div>
              </div>
            </div>
            <div class="control-group">
              <label class="control-label" for="rgb-led">Hex color code</label>
              <div class="controls">
                <div class="input-prepend">
                  <input class="span1" type="text" id="rgb-led" name="rgb-led" autocomplete="off" maxlength="7" value="#000000" />
                </div>
              </div>
            </div>
            <a href="/sketches/rgb-led.fzz" title="RGB LED sketch"><img src="/sketches/rgb-led-bb.png" alt="RGB LED Breadboard" /></a>
            <dl>
              <dt>Shopping List</dt>
              <dd>
                <ul>
                  <li>1 x Arduino</li>
                  <li>1 x <a href="http://www.sparkfun.com/products/9264" title="LED - RGB Diffused Common Cathode">LED RGB</a> (common cathode, pin order: rgb)</li>
                  <li>2 x 180 Ω resistor (for the blue and green legs)</li>
                  <li>1 x 330 Ω resistor (for the red leg)</li>
                </ul>
              </dd>
            </dl>
          </form>
        </div>
      </section>
    </div>
  </div>
    <div class="row">
    <div class="span8">
      <section id="learning">
        <div class="page-header">
          <h1>Learning</h1>
          <p>This project is just for hobby purposes. There are several good places to learn things related to JavaScript, Arduino, etc. Here are some of them. Check out the videos of projects on YouTube, search for the code of fun projects on <a href="http://www.github.com/">GitHub</a> (and share yours own) and chat with others developers on IRC channels (#node, #arduino, etc) on <a href="irc://chat.freenode.net/">freenode</a>.</p>
          <dl>
            <dt><a href="http://arduino.cc/">Arduino</a></dt>
            <dd>The home of the Arduino project.</dd>
            <dt><a href="https://github.com/supertunaman/Boatduinode/">Boatduinode</a> (<a href="http://vimeo.com/20150885">video</a>)</dt>
            <dd>Control a boat with node + WebSocket.</dd>
            <dt><a href="http://semu.github.com/noduino/">noduino</a></dt>
            <dd>A simple and flexible JavaScript and Node.js Framework for accessing basic Arduino controls from Web Applications using HTML5, Socket.IO and Node.js.</dd>
            <dt><a href="http://diveintohtml5.info/">Dive Into HTML5</a></dt>
            <dd>A great book about things you can do with <del>the amazingly innovative, genial and super cool HTML5</del> JavaScript and its new <ins>still experimental</ins> features (do use in production anyways).</dd>
            <dt><a href="http://nodejs.org/">node.js</a></dt>
            <dd>Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.</dd>
          </dl>
        </div>
      </section>
    </div>
  </div>
  <footer>
    <p class="alert alert-info"><i class="icon-shopping-cart"></i>
    no free robots here, if you need a Arduino or a RC car,
    <a href="http://www.amazon.com/" target="_blank">go shopping</a>
    or take a free ride while you can.</p>
    <code>
      <i class="icon-road"></i>
      git clone git@github.com:henvic/rcarweb.git
    </code>
  </footer>
</div>